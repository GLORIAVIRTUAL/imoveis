// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma" // Updated output path
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PropertyType {
  VENDA
  ALUGUEL
}

enum PropertyStatus {
  ATIVO
  INATIVO
  VENDIDO
  ALUGADO
  PENDENTE_PAGAMENTO
  PENDENTE_REVISAO
}

enum ContractType {
  COMPRA
  ALUGUEL
}

enum ContractStatus {
  GERADO
  ASSINADO
  REGISTRADO
}

enum MaritalStatus {
  SOLTEIRO
  CASADO
  DIVORCIADO
  VIUVO
  UNIAO_ESTAVEL
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  passwordHash  String
  cpf           String        @unique
  phone         String
  address       String?
  cep           String?
  rg            String?
  maritalStatus MaritalStatus?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  properties    Property[]    @relation("UserProperties")
  contractsBuyer Contract[]   @relation("BuyerContracts")
  contractsSeller Contract[]  @relation("SellerContracts")
  passwordResetTokens PasswordResetToken[] // Added relation
}

model City {
  id              String   @id @default(cuid())
  name            String
  state           String
  cartorioEmail   String?
  prefeituraEmail String?
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  properties      Property[]
  serviceProviders ServiceProvider[]
  adminSettings   AdminSetting[]

  @@unique([name, state])
}

model Property {
  id           String         @id @default(cuid())
  title        String
  neighborhood String
  description  String
  price        Float
  type         PropertyType
  status       PropertyStatus @default(PENDENTE_PAGAMENTO)
  depositPaid  Boolean        @default(false)
  bedrooms     Int?
  bathrooms    Int?
  area         Float?
  features     String[]       @default([])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  userId       String
  user         User           @relation("UserProperties", fields: [userId], references: [id])

  cityId       String
  city         City           @relation(fields: [cityId], references: [id])

  images       PropertyImage[]
  contracts    Contract[]
}

model PropertyImage {
  id         String   @id @default(cuid())
  url        String
  order      Int
  createdAt  DateTime @default(now())

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model ServiceProvider {
  id         String   @id @default(cuid())
  name       String
  profession String
  phone      String
  email      String   @unique
  active     Boolean  @default(false) // Activate after payment
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  cityId     String
  city       City     @relation(fields: [cityId], references: [id])
}

model AdminSetting {
  id          String   @id @default(cuid())
  settingKey  String   // e.g., "payment_link_property_sale_petrolina", "whatsapp_link", "logo_url"
  settingValue String
  updatedAt   DateTime @updatedAt

  cityId      String?  // Optional: Some settings might be global (cityId=null)
  city        City?    @relation(fields: [cityId], references: [id])

  @@unique([settingKey, cityId]) // Ensure unique keys per city (or globally if cityId is null)
}

model Contract {
  id             String         @id @default(cuid())
  type           ContractType
  price          Float
  paymentMethod  String?
  status         ContractStatus @default(GERADO)
  pdfUrl         String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  propertyId     String
  property       Property       @relation(fields: [propertyId], references: [id])

  buyerId        String
  buyer          User           @relation("BuyerContracts", fields: [buyerId], references: [id])

  sellerId       String
  seller         User           @relation("SellerContracts", fields: [sellerId], references: [id])
}

// Added model for password reset tokens
model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

